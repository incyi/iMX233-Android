Contents
1 Implementation of Android for the i.MX233 processor
1.1 Important
1.2 Prerequisites for Implementation IMX-android 
1.3 Unpacking and useful tools
1.4 Getting Source Code
1.5 Apply Patches
1.6 Construction of Uboot
1.7 Android Image
1.8 Android Kernel Configuration and generation of Zimage
1.9 Android Implementation rootfs
2 Copy to SD
2.1 Load Zimage
2.2 Charging Android rootfs
2.3 Busybox Settings
2.4 References

1. 
It has made the implementation of the Android system on Freescale i.MX233 processor performing tests on the development board Chumby Hacker Board. This is to extend the functionality of the card to run Java applications in console mode. To perform this implementation, it was necessary to adapt the Linux kernel functionality that will support Android system and it was also necessary to build the root filesystem of that for a similar architecture in which you are working ARM architecture.

1.1
To make these instructions is recommended before running Linux has been loaded and compiled the instructions on this page.

Here are the steps taken to compile this operating system for the processor shown:

1.2
Initially it is necessary to use a Linux kernel with patches needed to run the i.MX233 processor, you can use the kernel from the TuxRail card. The steps for microSD drivers and Linux kernel adaptation card found on this page.

Download and install the following packages:

sudo apt-get install nfs-kernel-server patch g++ rpm zlib1g-dev m4 bison libncurses5-dev gettext build-essential tcl intltool libxml2-dev minicom tftpd  xinetd curl

Download IMX-android-R7 from this link. (Link seems to be not working I'm looking for a new link)

1.3
cd /opt
sudo tar xzvf imx-android-r7.tar.gz
cd imx-android-r7/code
sudo tar xzvf R7.tar.gz

cd /opt/imx-android-r7/tool
sudo tar xzvf gcc-4.1.2-glibc-2.5-nptl-3.tar.gz -C /opt

gedit ~/.bashrc

Add these lines to the end:
export ARCH=arm
export CROSS_COMPILE=/opt/gcc-4.1.2-glibc-2.5-nptl-3/arm-none-linux-gnueabi/bin/arm-none-linux-gnueabi-

1.4
To obtain the source code we follow the following steps (The last step may take several hours downloading Make sure you have a good Internet connection.)

cd ~
mkdir myandroid
cd myandroid
curl http://android.git.kernel.org/repo > ./repo   
chmod a+x ./repo
./repo init -u git://android.git.kernel.org/platform/manifest.git -b eclair
cp /opt/imx-android-r7/code/R7/default.xml .repo/manifests/default.xml 
./repo sync

Also, get a clean kernel.org source code:
cd myandroid
git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-2.6.28.y.git kernel_imx

Download the source code of U-BOOT
cd myandroid/bootable/bootloader
git clone git://git.denx.de/u-boot.git uboot-imx


1.5
cd ~/myandroid
. /opt/imx-android-r7/code/R7/and_patch.sh
help

c_patch /opt/imx-android-r7/code/R7 imx_r7

Success: Now you can build android code for FSL i.MX platform


1.6

cd ~/myandroid/bootable/bootloader/uboot-imx
echo $ARCH && echo $CROSS_COMPILE
make mx51_bbg_android_config
make

1.7
cd ~/myandroid
make PRODUCT-imx51_BBG-eng | tee build_imx51_BBG_android.log

1.8
cd camino-a-kernel-tuxrail/

alias crossmake='make ARCH=arm CROSS_COMPILE=/home/<usuario>/myandroid/prebuilt/linux-x86/toolchain/arm-eabi-4.4.0/bin/arm-eabi-'
crossmake menuconfig

 │ │   [ ] Accessibility support  --->                                   │ │  
 │ │    < > InfiniBand support (NEW)  --->                               │ │  
 │ │    [ ] EDAC (Error Detection And Correction) reporting (NEW)  --->  │ │  
 │ │    <*> Real Time Clock  --->                                        │ │  
 │ │    [ ] DMA Engine support  --->                                     │ │  
 │ │    [ ] Auxiliary Display support  --->                              │ │  
 │ │    < > Userspace I/O drivers  --->                                  │ │  
 │ │        TI VLYNQ  --->                                               │ │  
 │ │    [*] Staging drivers  --->                                        │ │  
 │ │    [*] X86 Platform Specific Device Drivers (NEW)  --->   
 
 │ │    [*]   Android Binder IPC Driver                                  │ │  
 │ │    <*>   Android log driver                                         │ │  
 │ │    [*]   Android RAM buffer console                                 │ │  
 │ │    [*]     Enable verbose console messages on Android RAM console  │ │  
 │ │    [*]     Start Android RAM console early                          │ │  
 │ │    (0)       Android RAM console virtual address (NEW)              │ │  
 │ │    (0)       Android RAM console buffer size (NEW)                  │ │  
 │ │    [*]   Timed output class driver (NEW)                            │ │  
 │ │    <*>     Android timed gpio driver                                │ │  
 │ │    [*]   Android Low Memory Killer                                  │ │  
 
 crossmake -j3

1.9
gedit ~/myandroid/out/target/product/generic/root/init.rc

mount yaffs2 mtd @ system / system
mount yaffs2 mtd @ system / system ro remount

mount yaffs2 mtd @ userdata / data nosuid nodev

mount yaffs2 mtd @ cache / cache nosuid nodev


cd camino-al-kernel
crossmake -j3




2
2.1
console=ttyAM0,115200 init=/init root=/dev/mmcblk0p2 ro rootfstype=ext2 rootdelay=1 ssp1=mmc line=1 mem=64M androidboot.console=ttyAM0


2.2
cd myandroid/out/target/product/generic

sudo cp -r system data root/
cd root
sudo cp -avr * /media/etiqueta-particion-sd

2.3
cp Busybox /media/etiqueta-sd/system/bin

gedit /media/etiqueta-particion-sd/init.rc

service console /system/bin/sh

service console /system/bin/busybox sh

2.4
I.MX Android R7 User guide - Toolchain and android source installation.
Blog - ChinaUnix - Android porting to i.MX233 (Chinese): http://blog.chinaunix.net/space.php?uid=20146040&do=blog&id=76261
Busybox Android - Installation of busybox: http://www.busybox.net/FAQ.html
